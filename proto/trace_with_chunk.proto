/*
 * A trace consists of header information and a list of instruction information. 
 * Different instructions have different information, so the main trick is to use 
 * variant type to represent instructions.
 *
 * Since protobuf does not support variant type, the main trick is to use a message 
 * have multiple optional sub-messages, and an id to identify which is the real 
 * sub-message of the message.
 */

syntax = "proto3";

package trace_format;

enum architecture_t
{
  X86    = 0;
  X86_64 = 1;
}

/* address = value_32 | value_64 */
message address_t
{
  oneof value {
    sint32 value_32 = 1;
    sint64 value_64 = 2;
  }
}

/* register = (name, value) */
message register_t 
{
  string name     = 1;
  address_t value = 2;
}

/* memory = (address, value) */
message memory_t
{
  address_t address = 1;
  sint32 value       = 2;
}

/* concrete_info = read_reg | write_reg | load_mem | store_mem */
message concrete_info_t
{
   oneof value {
    register_t read_register  = 1;
    register_t write_register = 2;
    memory_t load_memory      = 3;
    memory_t store_memory     = 4;
  }
}

/* instruction = (thread_id, address, opcode, disassemble, c_info*) */
message instruction_t
{
  int32 thread_id                 = 1;
  address_t address               = 2;
  bytes opcode                    = 3;
  string disassemble              = 4;
  repeated concrete_info_t c_info = 5;
}

/* header = (architecture, address size) */
message header_t
{
  architecture_t architecture = 1;
}

/* chunk = instruction* */
message chunk_t
{
  repeated instruction_t instructions = 1;
}
