// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trace_with_chunk.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "trace_with_chunk.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace trace_format {

namespace {

const ::google::protobuf::Descriptor* address_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  address_t_reflection_ = NULL;
struct address_tOneofInstance {
  ::google::protobuf::uint32 value_32_;
  ::google::protobuf::uint64 value_64_;
}* address_t_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* register_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  register_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* memory_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  memory_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* concrete_info_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  concrete_info_t_reflection_ = NULL;
struct concrete_info_tOneofInstance {
  const ::trace_format::register_t* read_register_;
  const ::trace_format::register_t* write_register_;
  const ::trace_format::memory_t* load_memory_;
  const ::trace_format::memory_t* store_memory_;
}* concrete_info_t_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* instruction_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  instruction_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* header_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  header_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* chunk_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  chunk_t_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* architecture_t_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_trace_5fwith_5fchunk_2eproto() {
  protobuf_AddDesc_trace_5fwith_5fchunk_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "trace_with_chunk.proto");
  GOOGLE_CHECK(file != NULL);
  address_t_descriptor_ = file->message_type(0);
  static const int address_t_offsets_[3] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(address_t_default_oneof_instance_, value_32_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(address_t_default_oneof_instance_, value_64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(address_t, value_),
  };
  address_t_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      address_t_descriptor_,
      address_t::default_instance_,
      address_t_offsets_,
      -1,
      -1,
      -1,
      address_t_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(address_t, _oneof_case_[0]),
      sizeof(address_t),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(address_t, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(address_t, _is_default_instance_));
  register_t_descriptor_ = file->message_type(1);
  static const int register_t_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(register_t, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(register_t, value_),
  };
  register_t_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      register_t_descriptor_,
      register_t::default_instance_,
      register_t_offsets_,
      -1,
      -1,
      -1,
      sizeof(register_t),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(register_t, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(register_t, _is_default_instance_));
  memory_t_descriptor_ = file->message_type(2);
  static const int memory_t_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(memory_t, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(memory_t, value_),
  };
  memory_t_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      memory_t_descriptor_,
      memory_t::default_instance_,
      memory_t_offsets_,
      -1,
      -1,
      -1,
      sizeof(memory_t),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(memory_t, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(memory_t, _is_default_instance_));
  concrete_info_t_descriptor_ = file->message_type(3);
  static const int concrete_info_t_offsets_[5] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(concrete_info_t_default_oneof_instance_, read_register_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(concrete_info_t_default_oneof_instance_, write_register_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(concrete_info_t_default_oneof_instance_, load_memory_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(concrete_info_t_default_oneof_instance_, store_memory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(concrete_info_t, value_),
  };
  concrete_info_t_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      concrete_info_t_descriptor_,
      concrete_info_t::default_instance_,
      concrete_info_t_offsets_,
      -1,
      -1,
      -1,
      concrete_info_t_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(concrete_info_t, _oneof_case_[0]),
      sizeof(concrete_info_t),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(concrete_info_t, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(concrete_info_t, _is_default_instance_));
  instruction_t_descriptor_ = file->message_type(4);
  static const int instruction_t_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instruction_t, thread_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instruction_t, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instruction_t, opcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instruction_t, disassemble_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instruction_t, c_info_),
  };
  instruction_t_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      instruction_t_descriptor_,
      instruction_t::default_instance_,
      instruction_t_offsets_,
      -1,
      -1,
      -1,
      sizeof(instruction_t),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instruction_t, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instruction_t, _is_default_instance_));
  header_t_descriptor_ = file->message_type(5);
  static const int header_t_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(header_t, architecture_),
  };
  header_t_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      header_t_descriptor_,
      header_t::default_instance_,
      header_t_offsets_,
      -1,
      -1,
      -1,
      sizeof(header_t),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(header_t, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(header_t, _is_default_instance_));
  chunk_t_descriptor_ = file->message_type(6);
  static const int chunk_t_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chunk_t, instructions_),
  };
  chunk_t_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      chunk_t_descriptor_,
      chunk_t::default_instance_,
      chunk_t_offsets_,
      -1,
      -1,
      -1,
      sizeof(chunk_t),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chunk_t, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chunk_t, _is_default_instance_));
  architecture_t_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_trace_5fwith_5fchunk_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      address_t_descriptor_, &address_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      register_t_descriptor_, &register_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      memory_t_descriptor_, &memory_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      concrete_info_t_descriptor_, &concrete_info_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      instruction_t_descriptor_, &instruction_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      header_t_descriptor_, &header_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      chunk_t_descriptor_, &chunk_t::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_trace_5fwith_5fchunk_2eproto() {
  delete address_t::default_instance_;
  delete address_t_default_oneof_instance_;
  delete address_t_reflection_;
  delete register_t::default_instance_;
  delete register_t_reflection_;
  delete memory_t::default_instance_;
  delete memory_t_reflection_;
  delete concrete_info_t::default_instance_;
  delete concrete_info_t_default_oneof_instance_;
  delete concrete_info_t_reflection_;
  delete instruction_t::default_instance_;
  delete instruction_t_reflection_;
  delete header_t::default_instance_;
  delete header_t_reflection_;
  delete chunk_t::default_instance_;
  delete chunk_t_reflection_;
}

void protobuf_AddDesc_trace_5fwith_5fchunk_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026trace_with_chunk.proto\022\014trace_format\"<"
    "\n\taddress_t\022\022\n\010value_32\030\001 \001(\rH\000\022\022\n\010value"
    "_64\030\002 \001(\004H\000B\007\n\005value\"B\n\nregister_t\022\014\n\004na"
    "me\030\001 \001(\t\022&\n\005value\030\002 \001(\0132\027.trace_format.a"
    "ddress_t\"C\n\010memory_t\022(\n\007address\030\001 \001(\0132\027."
    "trace_format.address_t\022\r\n\005value\030\002 \001(\r\"\340\001"
    "\n\017concrete_info_t\0221\n\rread_register\030\001 \001(\013"
    "2\030.trace_format.register_tH\000\0222\n\016write_re"
    "gister\030\002 \001(\0132\030.trace_format.register_tH\000"
    "\022-\n\013load_memory\030\003 \001(\0132\026.trace_format.mem"
    "ory_tH\000\022.\n\014store_memory\030\004 \001(\0132\026.trace_fo"
    "rmat.memory_tH\000B\007\n\005value\"\240\001\n\rinstruction"
    "_t\022\021\n\tthread_id\030\001 \001(\r\022(\n\007address\030\002 \001(\0132\027"
    ".trace_format.address_t\022\016\n\006opcode\030\003 \001(\014\022"
    "\023\n\013disassemble\030\004 \001(\t\022-\n\006c_info\030\005 \003(\0132\035.t"
    "race_format.concrete_info_t\">\n\010header_t\022"
    "2\n\014architecture\030\001 \001(\0162\034.trace_format.arc"
    "hitecture_t\"<\n\007chunk_t\0221\n\014instructions\030\001"
    " \003(\0132\033.trace_format.instruction_t*%\n\016arc"
    "hitecture_t\022\007\n\003X86\020\000\022\n\n\006X86_64\020\001b\006proto3", 800);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "trace_with_chunk.proto", &protobuf_RegisterTypes);
  address_t::default_instance_ = new address_t();
  address_t_default_oneof_instance_ = new address_tOneofInstance();
  register_t::default_instance_ = new register_t();
  memory_t::default_instance_ = new memory_t();
  concrete_info_t::default_instance_ = new concrete_info_t();
  concrete_info_t_default_oneof_instance_ = new concrete_info_tOneofInstance();
  instruction_t::default_instance_ = new instruction_t();
  header_t::default_instance_ = new header_t();
  chunk_t::default_instance_ = new chunk_t();
  address_t::default_instance_->InitAsDefaultInstance();
  register_t::default_instance_->InitAsDefaultInstance();
  memory_t::default_instance_->InitAsDefaultInstance();
  concrete_info_t::default_instance_->InitAsDefaultInstance();
  instruction_t::default_instance_->InitAsDefaultInstance();
  header_t::default_instance_->InitAsDefaultInstance();
  chunk_t::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_trace_5fwith_5fchunk_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_trace_5fwith_5fchunk_2eproto {
  StaticDescriptorInitializer_trace_5fwith_5fchunk_2eproto() {
    protobuf_AddDesc_trace_5fwith_5fchunk_2eproto();
  }
} static_descriptor_initializer_trace_5fwith_5fchunk_2eproto_;
const ::google::protobuf::EnumDescriptor* architecture_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return architecture_t_descriptor_;
}
bool architecture_t_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int address_t::kValue32FieldNumber;
const int address_t::kValue64FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

address_t::address_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:trace_format.address_t)
}

void address_t::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  address_t_default_oneof_instance_->value_32_ = 0u;
  address_t_default_oneof_instance_->value_64_ = GOOGLE_ULONGLONG(0);
}

address_t::address_t(const address_t& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:trace_format.address_t)
}

void address_t::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  clear_has_value();
}

address_t::~address_t() {
  // @@protoc_insertion_point(destructor:trace_format.address_t)
  SharedDtor();
}

void address_t::SharedDtor() {
  if (has_value()) {
    clear_value();
  }
  if (this != default_instance_) {
  }
}

void address_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* address_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return address_t_descriptor_;
}

const address_t& address_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trace_5fwith_5fchunk_2eproto();
  return *default_instance_;
}

address_t* address_t::default_instance_ = NULL;

address_t* address_t::New(::google::protobuf::Arena* arena) const {
  address_t* n = new address_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void address_t::clear_value() {
  switch(value_case()) {
    case kValue32: {
      // No need to clear
      break;
    }
    case kValue64: {
      // No need to clear
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void address_t::Clear() {
  clear_value();
}

bool address_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:trace_format.address_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 value_32 = 1;
      case 1: {
        if (tag == 8) {
          clear_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_.value_32_)));
          set_has_value_32();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_value_64;
        break;
      }

      // optional uint64 value_64 = 2;
      case 2: {
        if (tag == 16) {
         parse_value_64:
          clear_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &value_.value_64_)));
          set_has_value_64();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:trace_format.address_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:trace_format.address_t)
  return false;
#undef DO_
}

void address_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:trace_format.address_t)
  // optional uint32 value_32 = 1;
  if (has_value_32()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->value_32(), output);
  }

  // optional uint64 value_64 = 2;
  if (has_value_64()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->value_64(), output);
  }

  // @@protoc_insertion_point(serialize_end:trace_format.address_t)
}

::google::protobuf::uint8* address_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:trace_format.address_t)
  // optional uint32 value_32 = 1;
  if (has_value_32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->value_32(), target);
  }

  // optional uint64 value_64 = 2;
  if (has_value_64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->value_64(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:trace_format.address_t)
  return target;
}

int address_t::ByteSize() const {
  int total_size = 0;

  switch (value_case()) {
    // optional uint32 value_32 = 1;
    case kValue32: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value_32());
      break;
    }
    // optional uint64 value_64 = 2;
    case kValue64: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->value_64());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void address_t::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const address_t* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const address_t>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void address_t::MergeFrom(const address_t& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  switch (from.value_case()) {
    case kValue32: {
      set_value_32(from.value_32());
      break;
    }
    case kValue64: {
      set_value_64(from.value_64());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void address_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void address_t::CopyFrom(const address_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool address_t::IsInitialized() const {

  return true;
}

void address_t::Swap(address_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void address_t::InternalSwap(address_t* other) {
  std::swap(value_, other->value_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata address_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = address_t_descriptor_;
  metadata.reflection = address_t_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// address_t

// optional uint32 value_32 = 1;
bool address_t::has_value_32() const {
  return value_case() == kValue32;
}
void address_t::set_has_value_32() {
  _oneof_case_[0] = kValue32;
}
void address_t::clear_value_32() {
  if (has_value_32()) {
    value_.value_32_ = 0u;
    clear_has_value();
  }
}
 ::google::protobuf::uint32 address_t::value_32() const {
  // @@protoc_insertion_point(field_get:trace_format.address_t.value_32)
  if (has_value_32()) {
    return value_.value_32_;
  }
  return 0u;
}
 void address_t::set_value_32(::google::protobuf::uint32 value) {
  if (!has_value_32()) {
    clear_value();
    set_has_value_32();
  }
  value_.value_32_ = value;
  // @@protoc_insertion_point(field_set:trace_format.address_t.value_32)
}

// optional uint64 value_64 = 2;
bool address_t::has_value_64() const {
  return value_case() == kValue64;
}
void address_t::set_has_value_64() {
  _oneof_case_[0] = kValue64;
}
void address_t::clear_value_64() {
  if (has_value_64()) {
    value_.value_64_ = GOOGLE_ULONGLONG(0);
    clear_has_value();
  }
}
 ::google::protobuf::uint64 address_t::value_64() const {
  // @@protoc_insertion_point(field_get:trace_format.address_t.value_64)
  if (has_value_64()) {
    return value_.value_64_;
  }
  return GOOGLE_ULONGLONG(0);
}
 void address_t::set_value_64(::google::protobuf::uint64 value) {
  if (!has_value_64()) {
    clear_value();
    set_has_value_64();
  }
  value_.value_64_ = value;
  // @@protoc_insertion_point(field_set:trace_format.address_t.value_64)
}

bool address_t::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
void address_t::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
address_t::ValueCase address_t::value_case() const {
  return address_t::ValueCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int register_t::kNameFieldNumber;
const int register_t::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

register_t::register_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:trace_format.register_t)
}

void register_t::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  value_ = const_cast< ::trace_format::address_t*>(&::trace_format::address_t::default_instance());
}

register_t::register_t(const register_t& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:trace_format.register_t)
}

void register_t::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = NULL;
}

register_t::~register_t() {
  // @@protoc_insertion_point(destructor:trace_format.register_t)
  SharedDtor();
}

void register_t::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete value_;
  }
}

void register_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* register_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return register_t_descriptor_;
}

const register_t& register_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trace_5fwith_5fchunk_2eproto();
  return *default_instance_;
}

register_t* register_t::default_instance_ = NULL;

register_t* register_t::New(::google::protobuf::Arena* arena) const {
  register_t* n = new register_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void register_t::Clear() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && value_ != NULL) delete value_;
  value_ = NULL;
}

bool register_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:trace_format.register_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "trace_format.register_t.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional .trace_format.address_t value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:trace_format.register_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:trace_format.register_t)
  return false;
#undef DO_
}

void register_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:trace_format.register_t)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "trace_format.register_t.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .trace_format.address_t value = 2;
  if (this->has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->value_, output);
  }

  // @@protoc_insertion_point(serialize_end:trace_format.register_t)
}

::google::protobuf::uint8* register_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:trace_format.register_t)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "trace_format.register_t.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .trace_format.address_t value = 2;
  if (this->has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->value_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:trace_format.register_t)
  return target;
}

int register_t::ByteSize() const {
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional .trace_format.address_t value = 2;
  if (this->has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->value_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void register_t::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const register_t* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const register_t>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void register_t::MergeFrom(const register_t& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_value()) {
    mutable_value()->::trace_format::address_t::MergeFrom(from.value());
  }
}

void register_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void register_t::CopyFrom(const register_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool register_t::IsInitialized() const {

  return true;
}

void register_t::Swap(register_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void register_t::InternalSwap(register_t* other) {
  name_.Swap(&other->name_);
  std::swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata register_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = register_t_descriptor_;
  metadata.reflection = register_t_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// register_t

// optional string name = 1;
void register_t::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& register_t::name() const {
  // @@protoc_insertion_point(field_get:trace_format.register_t.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void register_t::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:trace_format.register_t.name)
}
 void register_t::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:trace_format.register_t.name)
}
 void register_t::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:trace_format.register_t.name)
}
 ::std::string* register_t::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:trace_format.register_t.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* register_t::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void register_t::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:trace_format.register_t.name)
}

// optional .trace_format.address_t value = 2;
bool register_t::has_value() const {
  return !_is_default_instance_ && value_ != NULL;
}
void register_t::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) delete value_;
  value_ = NULL;
}
const ::trace_format::address_t& register_t::value() const {
  // @@protoc_insertion_point(field_get:trace_format.register_t.value)
  return value_ != NULL ? *value_ : *default_instance_->value_;
}
::trace_format::address_t* register_t::mutable_value() {
  
  if (value_ == NULL) {
    value_ = new ::trace_format::address_t;
  }
  // @@protoc_insertion_point(field_mutable:trace_format.register_t.value)
  return value_;
}
::trace_format::address_t* register_t::release_value() {
  
  ::trace_format::address_t* temp = value_;
  value_ = NULL;
  return temp;
}
void register_t::set_allocated_value(::trace_format::address_t* value) {
  delete value_;
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:trace_format.register_t.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int memory_t::kAddressFieldNumber;
const int memory_t::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

memory_t::memory_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:trace_format.memory_t)
}

void memory_t::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  address_ = const_cast< ::trace_format::address_t*>(&::trace_format::address_t::default_instance());
}

memory_t::memory_t(const memory_t& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:trace_format.memory_t)
}

void memory_t::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  address_ = NULL;
  value_ = 0u;
}

memory_t::~memory_t() {
  // @@protoc_insertion_point(destructor:trace_format.memory_t)
  SharedDtor();
}

void memory_t::SharedDtor() {
  if (this != default_instance_) {
    delete address_;
  }
}

void memory_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* memory_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return memory_t_descriptor_;
}

const memory_t& memory_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trace_5fwith_5fchunk_2eproto();
  return *default_instance_;
}

memory_t* memory_t::default_instance_ = NULL;

memory_t* memory_t::New(::google::protobuf::Arena* arena) const {
  memory_t* n = new memory_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void memory_t::Clear() {
  if (GetArenaNoVirtual() == NULL && address_ != NULL) delete address_;
  address_ = NULL;
  value_ = 0u;
}

bool memory_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:trace_format.memory_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .trace_format.address_t address = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_address()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional uint32 value = 2;
      case 2: {
        if (tag == 16) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:trace_format.memory_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:trace_format.memory_t)
  return false;
#undef DO_
}

void memory_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:trace_format.memory_t)
  // optional .trace_format.address_t address = 1;
  if (this->has_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->address_, output);
  }

  // optional uint32 value = 2;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:trace_format.memory_t)
}

::google::protobuf::uint8* memory_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:trace_format.memory_t)
  // optional .trace_format.address_t address = 1;
  if (this->has_address()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->address_, target);
  }

  // optional uint32 value = 2;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:trace_format.memory_t)
  return target;
}

int memory_t::ByteSize() const {
  int total_size = 0;

  // optional .trace_format.address_t address = 1;
  if (this->has_address()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->address_);
  }

  // optional uint32 value = 2;
  if (this->value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->value());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void memory_t::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const memory_t* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const memory_t>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void memory_t::MergeFrom(const memory_t& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_address()) {
    mutable_address()->::trace_format::address_t::MergeFrom(from.address());
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void memory_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void memory_t::CopyFrom(const memory_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool memory_t::IsInitialized() const {

  return true;
}

void memory_t::Swap(memory_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void memory_t::InternalSwap(memory_t* other) {
  std::swap(address_, other->address_);
  std::swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata memory_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = memory_t_descriptor_;
  metadata.reflection = memory_t_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// memory_t

// optional .trace_format.address_t address = 1;
bool memory_t::has_address() const {
  return !_is_default_instance_ && address_ != NULL;
}
void memory_t::clear_address() {
  if (GetArenaNoVirtual() == NULL && address_ != NULL) delete address_;
  address_ = NULL;
}
const ::trace_format::address_t& memory_t::address() const {
  // @@protoc_insertion_point(field_get:trace_format.memory_t.address)
  return address_ != NULL ? *address_ : *default_instance_->address_;
}
::trace_format::address_t* memory_t::mutable_address() {
  
  if (address_ == NULL) {
    address_ = new ::trace_format::address_t;
  }
  // @@protoc_insertion_point(field_mutable:trace_format.memory_t.address)
  return address_;
}
::trace_format::address_t* memory_t::release_address() {
  
  ::trace_format::address_t* temp = address_;
  address_ = NULL;
  return temp;
}
void memory_t::set_allocated_address(::trace_format::address_t* address) {
  delete address_;
  address_ = address;
  if (address) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:trace_format.memory_t.address)
}

// optional uint32 value = 2;
void memory_t::clear_value() {
  value_ = 0u;
}
 ::google::protobuf::uint32 memory_t::value() const {
  // @@protoc_insertion_point(field_get:trace_format.memory_t.value)
  return value_;
}
 void memory_t::set_value(::google::protobuf::uint32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:trace_format.memory_t.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int concrete_info_t::kReadRegisterFieldNumber;
const int concrete_info_t::kWriteRegisterFieldNumber;
const int concrete_info_t::kLoadMemoryFieldNumber;
const int concrete_info_t::kStoreMemoryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

concrete_info_t::concrete_info_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:trace_format.concrete_info_t)
}

void concrete_info_t::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  concrete_info_t_default_oneof_instance_->read_register_ = const_cast< ::trace_format::register_t*>(&::trace_format::register_t::default_instance());
  concrete_info_t_default_oneof_instance_->write_register_ = const_cast< ::trace_format::register_t*>(&::trace_format::register_t::default_instance());
  concrete_info_t_default_oneof_instance_->load_memory_ = const_cast< ::trace_format::memory_t*>(&::trace_format::memory_t::default_instance());
  concrete_info_t_default_oneof_instance_->store_memory_ = const_cast< ::trace_format::memory_t*>(&::trace_format::memory_t::default_instance());
}

concrete_info_t::concrete_info_t(const concrete_info_t& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:trace_format.concrete_info_t)
}

void concrete_info_t::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  clear_has_value();
}

concrete_info_t::~concrete_info_t() {
  // @@protoc_insertion_point(destructor:trace_format.concrete_info_t)
  SharedDtor();
}

void concrete_info_t::SharedDtor() {
  if (has_value()) {
    clear_value();
  }
  if (this != default_instance_) {
  }
}

void concrete_info_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* concrete_info_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return concrete_info_t_descriptor_;
}

const concrete_info_t& concrete_info_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trace_5fwith_5fchunk_2eproto();
  return *default_instance_;
}

concrete_info_t* concrete_info_t::default_instance_ = NULL;

concrete_info_t* concrete_info_t::New(::google::protobuf::Arena* arena) const {
  concrete_info_t* n = new concrete_info_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void concrete_info_t::clear_value() {
  switch(value_case()) {
    case kReadRegister: {
      delete value_.read_register_;
      break;
    }
    case kWriteRegister: {
      delete value_.write_register_;
      break;
    }
    case kLoadMemory: {
      delete value_.load_memory_;
      break;
    }
    case kStoreMemory: {
      delete value_.store_memory_;
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void concrete_info_t::Clear() {
  clear_value();
}

bool concrete_info_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:trace_format.concrete_info_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .trace_format.register_t read_register = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_read_register()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_write_register;
        break;
      }

      // optional .trace_format.register_t write_register = 2;
      case 2: {
        if (tag == 18) {
         parse_write_register:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_write_register()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_load_memory;
        break;
      }

      // optional .trace_format.memory_t load_memory = 3;
      case 3: {
        if (tag == 26) {
         parse_load_memory:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_load_memory()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_store_memory;
        break;
      }

      // optional .trace_format.memory_t store_memory = 4;
      case 4: {
        if (tag == 34) {
         parse_store_memory:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_store_memory()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:trace_format.concrete_info_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:trace_format.concrete_info_t)
  return false;
#undef DO_
}

void concrete_info_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:trace_format.concrete_info_t)
  // optional .trace_format.register_t read_register = 1;
  if (has_read_register()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *value_.read_register_, output);
  }

  // optional .trace_format.register_t write_register = 2;
  if (has_write_register()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *value_.write_register_, output);
  }

  // optional .trace_format.memory_t load_memory = 3;
  if (has_load_memory()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *value_.load_memory_, output);
  }

  // optional .trace_format.memory_t store_memory = 4;
  if (has_store_memory()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *value_.store_memory_, output);
  }

  // @@protoc_insertion_point(serialize_end:trace_format.concrete_info_t)
}

::google::protobuf::uint8* concrete_info_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:trace_format.concrete_info_t)
  // optional .trace_format.register_t read_register = 1;
  if (has_read_register()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *value_.read_register_, target);
  }

  // optional .trace_format.register_t write_register = 2;
  if (has_write_register()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *value_.write_register_, target);
  }

  // optional .trace_format.memory_t load_memory = 3;
  if (has_load_memory()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *value_.load_memory_, target);
  }

  // optional .trace_format.memory_t store_memory = 4;
  if (has_store_memory()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *value_.store_memory_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:trace_format.concrete_info_t)
  return target;
}

int concrete_info_t::ByteSize() const {
  int total_size = 0;

  switch (value_case()) {
    // optional .trace_format.register_t read_register = 1;
    case kReadRegister: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.read_register_);
      break;
    }
    // optional .trace_format.register_t write_register = 2;
    case kWriteRegister: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.write_register_);
      break;
    }
    // optional .trace_format.memory_t load_memory = 3;
    case kLoadMemory: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.load_memory_);
      break;
    }
    // optional .trace_format.memory_t store_memory = 4;
    case kStoreMemory: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.store_memory_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void concrete_info_t::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const concrete_info_t* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const concrete_info_t>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void concrete_info_t::MergeFrom(const concrete_info_t& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  switch (from.value_case()) {
    case kReadRegister: {
      mutable_read_register()->::trace_format::register_t::MergeFrom(from.read_register());
      break;
    }
    case kWriteRegister: {
      mutable_write_register()->::trace_format::register_t::MergeFrom(from.write_register());
      break;
    }
    case kLoadMemory: {
      mutable_load_memory()->::trace_format::memory_t::MergeFrom(from.load_memory());
      break;
    }
    case kStoreMemory: {
      mutable_store_memory()->::trace_format::memory_t::MergeFrom(from.store_memory());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void concrete_info_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void concrete_info_t::CopyFrom(const concrete_info_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool concrete_info_t::IsInitialized() const {

  return true;
}

void concrete_info_t::Swap(concrete_info_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void concrete_info_t::InternalSwap(concrete_info_t* other) {
  std::swap(value_, other->value_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata concrete_info_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = concrete_info_t_descriptor_;
  metadata.reflection = concrete_info_t_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// concrete_info_t

// optional .trace_format.register_t read_register = 1;
bool concrete_info_t::has_read_register() const {
  return value_case() == kReadRegister;
}
void concrete_info_t::set_has_read_register() {
  _oneof_case_[0] = kReadRegister;
}
void concrete_info_t::clear_read_register() {
  if (has_read_register()) {
    delete value_.read_register_;
    clear_has_value();
  }
}
 const ::trace_format::register_t& concrete_info_t::read_register() const {
  // @@protoc_insertion_point(field_get:trace_format.concrete_info_t.read_register)
  return has_read_register()
      ? *value_.read_register_
      : ::trace_format::register_t::default_instance();
}
::trace_format::register_t* concrete_info_t::mutable_read_register() {
  if (!has_read_register()) {
    clear_value();
    set_has_read_register();
    value_.read_register_ = new ::trace_format::register_t;
  }
  // @@protoc_insertion_point(field_mutable:trace_format.concrete_info_t.read_register)
  return value_.read_register_;
}
::trace_format::register_t* concrete_info_t::release_read_register() {
  if (has_read_register()) {
    clear_has_value();
    ::trace_format::register_t* temp = value_.read_register_;
    value_.read_register_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void concrete_info_t::set_allocated_read_register(::trace_format::register_t* read_register) {
  clear_value();
  if (read_register) {
    set_has_read_register();
    value_.read_register_ = read_register;
  }
  // @@protoc_insertion_point(field_set_allocated:trace_format.concrete_info_t.read_register)
}

// optional .trace_format.register_t write_register = 2;
bool concrete_info_t::has_write_register() const {
  return value_case() == kWriteRegister;
}
void concrete_info_t::set_has_write_register() {
  _oneof_case_[0] = kWriteRegister;
}
void concrete_info_t::clear_write_register() {
  if (has_write_register()) {
    delete value_.write_register_;
    clear_has_value();
  }
}
 const ::trace_format::register_t& concrete_info_t::write_register() const {
  // @@protoc_insertion_point(field_get:trace_format.concrete_info_t.write_register)
  return has_write_register()
      ? *value_.write_register_
      : ::trace_format::register_t::default_instance();
}
::trace_format::register_t* concrete_info_t::mutable_write_register() {
  if (!has_write_register()) {
    clear_value();
    set_has_write_register();
    value_.write_register_ = new ::trace_format::register_t;
  }
  // @@protoc_insertion_point(field_mutable:trace_format.concrete_info_t.write_register)
  return value_.write_register_;
}
::trace_format::register_t* concrete_info_t::release_write_register() {
  if (has_write_register()) {
    clear_has_value();
    ::trace_format::register_t* temp = value_.write_register_;
    value_.write_register_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void concrete_info_t::set_allocated_write_register(::trace_format::register_t* write_register) {
  clear_value();
  if (write_register) {
    set_has_write_register();
    value_.write_register_ = write_register;
  }
  // @@protoc_insertion_point(field_set_allocated:trace_format.concrete_info_t.write_register)
}

// optional .trace_format.memory_t load_memory = 3;
bool concrete_info_t::has_load_memory() const {
  return value_case() == kLoadMemory;
}
void concrete_info_t::set_has_load_memory() {
  _oneof_case_[0] = kLoadMemory;
}
void concrete_info_t::clear_load_memory() {
  if (has_load_memory()) {
    delete value_.load_memory_;
    clear_has_value();
  }
}
 const ::trace_format::memory_t& concrete_info_t::load_memory() const {
  // @@protoc_insertion_point(field_get:trace_format.concrete_info_t.load_memory)
  return has_load_memory()
      ? *value_.load_memory_
      : ::trace_format::memory_t::default_instance();
}
::trace_format::memory_t* concrete_info_t::mutable_load_memory() {
  if (!has_load_memory()) {
    clear_value();
    set_has_load_memory();
    value_.load_memory_ = new ::trace_format::memory_t;
  }
  // @@protoc_insertion_point(field_mutable:trace_format.concrete_info_t.load_memory)
  return value_.load_memory_;
}
::trace_format::memory_t* concrete_info_t::release_load_memory() {
  if (has_load_memory()) {
    clear_has_value();
    ::trace_format::memory_t* temp = value_.load_memory_;
    value_.load_memory_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void concrete_info_t::set_allocated_load_memory(::trace_format::memory_t* load_memory) {
  clear_value();
  if (load_memory) {
    set_has_load_memory();
    value_.load_memory_ = load_memory;
  }
  // @@protoc_insertion_point(field_set_allocated:trace_format.concrete_info_t.load_memory)
}

// optional .trace_format.memory_t store_memory = 4;
bool concrete_info_t::has_store_memory() const {
  return value_case() == kStoreMemory;
}
void concrete_info_t::set_has_store_memory() {
  _oneof_case_[0] = kStoreMemory;
}
void concrete_info_t::clear_store_memory() {
  if (has_store_memory()) {
    delete value_.store_memory_;
    clear_has_value();
  }
}
 const ::trace_format::memory_t& concrete_info_t::store_memory() const {
  // @@protoc_insertion_point(field_get:trace_format.concrete_info_t.store_memory)
  return has_store_memory()
      ? *value_.store_memory_
      : ::trace_format::memory_t::default_instance();
}
::trace_format::memory_t* concrete_info_t::mutable_store_memory() {
  if (!has_store_memory()) {
    clear_value();
    set_has_store_memory();
    value_.store_memory_ = new ::trace_format::memory_t;
  }
  // @@protoc_insertion_point(field_mutable:trace_format.concrete_info_t.store_memory)
  return value_.store_memory_;
}
::trace_format::memory_t* concrete_info_t::release_store_memory() {
  if (has_store_memory()) {
    clear_has_value();
    ::trace_format::memory_t* temp = value_.store_memory_;
    value_.store_memory_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void concrete_info_t::set_allocated_store_memory(::trace_format::memory_t* store_memory) {
  clear_value();
  if (store_memory) {
    set_has_store_memory();
    value_.store_memory_ = store_memory;
  }
  // @@protoc_insertion_point(field_set_allocated:trace_format.concrete_info_t.store_memory)
}

bool concrete_info_t::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
void concrete_info_t::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
concrete_info_t::ValueCase concrete_info_t::value_case() const {
  return concrete_info_t::ValueCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int instruction_t::kThreadIdFieldNumber;
const int instruction_t::kAddressFieldNumber;
const int instruction_t::kOpcodeFieldNumber;
const int instruction_t::kDisassembleFieldNumber;
const int instruction_t::kCInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

instruction_t::instruction_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:trace_format.instruction_t)
}

void instruction_t::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  address_ = const_cast< ::trace_format::address_t*>(&::trace_format::address_t::default_instance());
}

instruction_t::instruction_t(const instruction_t& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:trace_format.instruction_t)
}

void instruction_t::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  thread_id_ = 0u;
  address_ = NULL;
  opcode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  disassemble_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

instruction_t::~instruction_t() {
  // @@protoc_insertion_point(destructor:trace_format.instruction_t)
  SharedDtor();
}

void instruction_t::SharedDtor() {
  opcode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  disassemble_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete address_;
  }
}

void instruction_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* instruction_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return instruction_t_descriptor_;
}

const instruction_t& instruction_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trace_5fwith_5fchunk_2eproto();
  return *default_instance_;
}

instruction_t* instruction_t::default_instance_ = NULL;

instruction_t* instruction_t::New(::google::protobuf::Arena* arena) const {
  instruction_t* n = new instruction_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void instruction_t::Clear() {
  thread_id_ = 0u;
  if (GetArenaNoVirtual() == NULL && address_ != NULL) delete address_;
  address_ = NULL;
  opcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  disassemble_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  c_info_.Clear();
}

bool instruction_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:trace_format.instruction_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 thread_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &thread_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_address;
        break;
      }

      // optional .trace_format.address_t address = 2;
      case 2: {
        if (tag == 18) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_address()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_opcode;
        break;
      }

      // optional bytes opcode = 3;
      case 3: {
        if (tag == 26) {
         parse_opcode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_opcode()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_disassemble;
        break;
      }

      // optional string disassemble = 4;
      case 4: {
        if (tag == 34) {
         parse_disassemble:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_disassemble()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->disassemble().data(), this->disassemble().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "trace_format.instruction_t.disassemble"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_c_info;
        break;
      }

      // repeated .trace_format.concrete_info_t c_info = 5;
      case 5: {
        if (tag == 42) {
         parse_c_info:
          DO_(input->IncrementRecursionDepth());
         parse_loop_c_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_c_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_c_info;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:trace_format.instruction_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:trace_format.instruction_t)
  return false;
#undef DO_
}

void instruction_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:trace_format.instruction_t)
  // optional uint32 thread_id = 1;
  if (this->thread_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->thread_id(), output);
  }

  // optional .trace_format.address_t address = 2;
  if (this->has_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->address_, output);
  }

  // optional bytes opcode = 3;
  if (this->opcode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->opcode(), output);
  }

  // optional string disassemble = 4;
  if (this->disassemble().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->disassemble().data(), this->disassemble().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "trace_format.instruction_t.disassemble");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->disassemble(), output);
  }

  // repeated .trace_format.concrete_info_t c_info = 5;
  for (unsigned int i = 0, n = this->c_info_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->c_info(i), output);
  }

  // @@protoc_insertion_point(serialize_end:trace_format.instruction_t)
}

::google::protobuf::uint8* instruction_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:trace_format.instruction_t)
  // optional uint32 thread_id = 1;
  if (this->thread_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->thread_id(), target);
  }

  // optional .trace_format.address_t address = 2;
  if (this->has_address()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->address_, target);
  }

  // optional bytes opcode = 3;
  if (this->opcode().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->opcode(), target);
  }

  // optional string disassemble = 4;
  if (this->disassemble().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->disassemble().data(), this->disassemble().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "trace_format.instruction_t.disassemble");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->disassemble(), target);
  }

  // repeated .trace_format.concrete_info_t c_info = 5;
  for (unsigned int i = 0, n = this->c_info_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->c_info(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:trace_format.instruction_t)
  return target;
}

int instruction_t::ByteSize() const {
  int total_size = 0;

  // optional uint32 thread_id = 1;
  if (this->thread_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->thread_id());
  }

  // optional .trace_format.address_t address = 2;
  if (this->has_address()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->address_);
  }

  // optional bytes opcode = 3;
  if (this->opcode().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->opcode());
  }

  // optional string disassemble = 4;
  if (this->disassemble().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->disassemble());
  }

  // repeated .trace_format.concrete_info_t c_info = 5;
  total_size += 1 * this->c_info_size();
  for (int i = 0; i < this->c_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->c_info(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void instruction_t::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const instruction_t* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const instruction_t>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void instruction_t::MergeFrom(const instruction_t& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  c_info_.MergeFrom(from.c_info_);
  if (from.thread_id() != 0) {
    set_thread_id(from.thread_id());
  }
  if (from.has_address()) {
    mutable_address()->::trace_format::address_t::MergeFrom(from.address());
  }
  if (from.opcode().size() > 0) {

    opcode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.opcode_);
  }
  if (from.disassemble().size() > 0) {

    disassemble_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.disassemble_);
  }
}

void instruction_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void instruction_t::CopyFrom(const instruction_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool instruction_t::IsInitialized() const {

  return true;
}

void instruction_t::Swap(instruction_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void instruction_t::InternalSwap(instruction_t* other) {
  std::swap(thread_id_, other->thread_id_);
  std::swap(address_, other->address_);
  opcode_.Swap(&other->opcode_);
  disassemble_.Swap(&other->disassemble_);
  c_info_.UnsafeArenaSwap(&other->c_info_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata instruction_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = instruction_t_descriptor_;
  metadata.reflection = instruction_t_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// instruction_t

// optional uint32 thread_id = 1;
void instruction_t::clear_thread_id() {
  thread_id_ = 0u;
}
 ::google::protobuf::uint32 instruction_t::thread_id() const {
  // @@protoc_insertion_point(field_get:trace_format.instruction_t.thread_id)
  return thread_id_;
}
 void instruction_t::set_thread_id(::google::protobuf::uint32 value) {
  
  thread_id_ = value;
  // @@protoc_insertion_point(field_set:trace_format.instruction_t.thread_id)
}

// optional .trace_format.address_t address = 2;
bool instruction_t::has_address() const {
  return !_is_default_instance_ && address_ != NULL;
}
void instruction_t::clear_address() {
  if (GetArenaNoVirtual() == NULL && address_ != NULL) delete address_;
  address_ = NULL;
}
const ::trace_format::address_t& instruction_t::address() const {
  // @@protoc_insertion_point(field_get:trace_format.instruction_t.address)
  return address_ != NULL ? *address_ : *default_instance_->address_;
}
::trace_format::address_t* instruction_t::mutable_address() {
  
  if (address_ == NULL) {
    address_ = new ::trace_format::address_t;
  }
  // @@protoc_insertion_point(field_mutable:trace_format.instruction_t.address)
  return address_;
}
::trace_format::address_t* instruction_t::release_address() {
  
  ::trace_format::address_t* temp = address_;
  address_ = NULL;
  return temp;
}
void instruction_t::set_allocated_address(::trace_format::address_t* address) {
  delete address_;
  address_ = address;
  if (address) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:trace_format.instruction_t.address)
}

// optional bytes opcode = 3;
void instruction_t::clear_opcode() {
  opcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& instruction_t::opcode() const {
  // @@protoc_insertion_point(field_get:trace_format.instruction_t.opcode)
  return opcode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void instruction_t::set_opcode(const ::std::string& value) {
  
  opcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:trace_format.instruction_t.opcode)
}
 void instruction_t::set_opcode(const char* value) {
  
  opcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:trace_format.instruction_t.opcode)
}
 void instruction_t::set_opcode(const void* value, size_t size) {
  
  opcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:trace_format.instruction_t.opcode)
}
 ::std::string* instruction_t::mutable_opcode() {
  
  // @@protoc_insertion_point(field_mutable:trace_format.instruction_t.opcode)
  return opcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* instruction_t::release_opcode() {
  
  return opcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void instruction_t::set_allocated_opcode(::std::string* opcode) {
  if (opcode != NULL) {
    
  } else {
    
  }
  opcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), opcode);
  // @@protoc_insertion_point(field_set_allocated:trace_format.instruction_t.opcode)
}

// optional string disassemble = 4;
void instruction_t::clear_disassemble() {
  disassemble_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& instruction_t::disassemble() const {
  // @@protoc_insertion_point(field_get:trace_format.instruction_t.disassemble)
  return disassemble_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void instruction_t::set_disassemble(const ::std::string& value) {
  
  disassemble_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:trace_format.instruction_t.disassemble)
}
 void instruction_t::set_disassemble(const char* value) {
  
  disassemble_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:trace_format.instruction_t.disassemble)
}
 void instruction_t::set_disassemble(const char* value, size_t size) {
  
  disassemble_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:trace_format.instruction_t.disassemble)
}
 ::std::string* instruction_t::mutable_disassemble() {
  
  // @@protoc_insertion_point(field_mutable:trace_format.instruction_t.disassemble)
  return disassemble_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* instruction_t::release_disassemble() {
  
  return disassemble_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void instruction_t::set_allocated_disassemble(::std::string* disassemble) {
  if (disassemble != NULL) {
    
  } else {
    
  }
  disassemble_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), disassemble);
  // @@protoc_insertion_point(field_set_allocated:trace_format.instruction_t.disassemble)
}

// repeated .trace_format.concrete_info_t c_info = 5;
int instruction_t::c_info_size() const {
  return c_info_.size();
}
void instruction_t::clear_c_info() {
  c_info_.Clear();
}
const ::trace_format::concrete_info_t& instruction_t::c_info(int index) const {
  // @@protoc_insertion_point(field_get:trace_format.instruction_t.c_info)
  return c_info_.Get(index);
}
::trace_format::concrete_info_t* instruction_t::mutable_c_info(int index) {
  // @@protoc_insertion_point(field_mutable:trace_format.instruction_t.c_info)
  return c_info_.Mutable(index);
}
::trace_format::concrete_info_t* instruction_t::add_c_info() {
  // @@protoc_insertion_point(field_add:trace_format.instruction_t.c_info)
  return c_info_.Add();
}
::google::protobuf::RepeatedPtrField< ::trace_format::concrete_info_t >*
instruction_t::mutable_c_info() {
  // @@protoc_insertion_point(field_mutable_list:trace_format.instruction_t.c_info)
  return &c_info_;
}
const ::google::protobuf::RepeatedPtrField< ::trace_format::concrete_info_t >&
instruction_t::c_info() const {
  // @@protoc_insertion_point(field_list:trace_format.instruction_t.c_info)
  return c_info_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int header_t::kArchitectureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

header_t::header_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:trace_format.header_t)
}

void header_t::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

header_t::header_t(const header_t& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:trace_format.header_t)
}

void header_t::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  architecture_ = 0;
}

header_t::~header_t() {
  // @@protoc_insertion_point(destructor:trace_format.header_t)
  SharedDtor();
}

void header_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void header_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* header_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return header_t_descriptor_;
}

const header_t& header_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trace_5fwith_5fchunk_2eproto();
  return *default_instance_;
}

header_t* header_t::default_instance_ = NULL;

header_t* header_t::New(::google::protobuf::Arena* arena) const {
  header_t* n = new header_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void header_t::Clear() {
  architecture_ = 0;
}

bool header_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:trace_format.header_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .trace_format.architecture_t architecture = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_architecture(static_cast< ::trace_format::architecture_t >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:trace_format.header_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:trace_format.header_t)
  return false;
#undef DO_
}

void header_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:trace_format.header_t)
  // optional .trace_format.architecture_t architecture = 1;
  if (this->architecture() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->architecture(), output);
  }

  // @@protoc_insertion_point(serialize_end:trace_format.header_t)
}

::google::protobuf::uint8* header_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:trace_format.header_t)
  // optional .trace_format.architecture_t architecture = 1;
  if (this->architecture() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->architecture(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:trace_format.header_t)
  return target;
}

int header_t::ByteSize() const {
  int total_size = 0;

  // optional .trace_format.architecture_t architecture = 1;
  if (this->architecture() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->architecture());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void header_t::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const header_t* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const header_t>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void header_t::MergeFrom(const header_t& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.architecture() != 0) {
    set_architecture(from.architecture());
  }
}

void header_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void header_t::CopyFrom(const header_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool header_t::IsInitialized() const {

  return true;
}

void header_t::Swap(header_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void header_t::InternalSwap(header_t* other) {
  std::swap(architecture_, other->architecture_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata header_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = header_t_descriptor_;
  metadata.reflection = header_t_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// header_t

// optional .trace_format.architecture_t architecture = 1;
void header_t::clear_architecture() {
  architecture_ = 0;
}
 ::trace_format::architecture_t header_t::architecture() const {
  // @@protoc_insertion_point(field_get:trace_format.header_t.architecture)
  return static_cast< ::trace_format::architecture_t >(architecture_);
}
 void header_t::set_architecture(::trace_format::architecture_t value) {
  
  architecture_ = value;
  // @@protoc_insertion_point(field_set:trace_format.header_t.architecture)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int chunk_t::kInstructionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

chunk_t::chunk_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:trace_format.chunk_t)
}

void chunk_t::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

chunk_t::chunk_t(const chunk_t& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:trace_format.chunk_t)
}

void chunk_t::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

chunk_t::~chunk_t() {
  // @@protoc_insertion_point(destructor:trace_format.chunk_t)
  SharedDtor();
}

void chunk_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void chunk_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* chunk_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return chunk_t_descriptor_;
}

const chunk_t& chunk_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trace_5fwith_5fchunk_2eproto();
  return *default_instance_;
}

chunk_t* chunk_t::default_instance_ = NULL;

chunk_t* chunk_t::New(::google::protobuf::Arena* arena) const {
  chunk_t* n = new chunk_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void chunk_t::Clear() {
  instructions_.Clear();
}

bool chunk_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:trace_format.chunk_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .trace_format.instruction_t instructions = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_instructions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_instructions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_instructions;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:trace_format.chunk_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:trace_format.chunk_t)
  return false;
#undef DO_
}

void chunk_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:trace_format.chunk_t)
  // repeated .trace_format.instruction_t instructions = 1;
  for (unsigned int i = 0, n = this->instructions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->instructions(i), output);
  }

  // @@protoc_insertion_point(serialize_end:trace_format.chunk_t)
}

::google::protobuf::uint8* chunk_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:trace_format.chunk_t)
  // repeated .trace_format.instruction_t instructions = 1;
  for (unsigned int i = 0, n = this->instructions_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->instructions(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:trace_format.chunk_t)
  return target;
}

int chunk_t::ByteSize() const {
  int total_size = 0;

  // repeated .trace_format.instruction_t instructions = 1;
  total_size += 1 * this->instructions_size();
  for (int i = 0; i < this->instructions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->instructions(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void chunk_t::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const chunk_t* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const chunk_t>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void chunk_t::MergeFrom(const chunk_t& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  instructions_.MergeFrom(from.instructions_);
}

void chunk_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void chunk_t::CopyFrom(const chunk_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool chunk_t::IsInitialized() const {

  return true;
}

void chunk_t::Swap(chunk_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void chunk_t::InternalSwap(chunk_t* other) {
  instructions_.UnsafeArenaSwap(&other->instructions_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata chunk_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = chunk_t_descriptor_;
  metadata.reflection = chunk_t_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// chunk_t

// repeated .trace_format.instruction_t instructions = 1;
int chunk_t::instructions_size() const {
  return instructions_.size();
}
void chunk_t::clear_instructions() {
  instructions_.Clear();
}
const ::trace_format::instruction_t& chunk_t::instructions(int index) const {
  // @@protoc_insertion_point(field_get:trace_format.chunk_t.instructions)
  return instructions_.Get(index);
}
::trace_format::instruction_t* chunk_t::mutable_instructions(int index) {
  // @@protoc_insertion_point(field_mutable:trace_format.chunk_t.instructions)
  return instructions_.Mutable(index);
}
::trace_format::instruction_t* chunk_t::add_instructions() {
  // @@protoc_insertion_point(field_add:trace_format.chunk_t.instructions)
  return instructions_.Add();
}
::google::protobuf::RepeatedPtrField< ::trace_format::instruction_t >*
chunk_t::mutable_instructions() {
  // @@protoc_insertion_point(field_mutable_list:trace_format.chunk_t.instructions)
  return &instructions_;
}
const ::google::protobuf::RepeatedPtrField< ::trace_format::instruction_t >&
chunk_t::instructions() const {
  // @@protoc_insertion_point(field_list:trace_format.chunk_t.instructions)
  return instructions_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace trace_format

// @@protoc_insertion_point(global_scope)
